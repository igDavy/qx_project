<template>
	<view class="register-container">
		<!-- <view class="header">
			<view class="back-icon" @tap="handleGoBack">
				<text class="iconfont icon-back">&#xe697;</text>
			</view>
			<view class="title">注册账号</view>
		</view> -->
		
		<!-- 添加加载状态指示器 -->
		<view v-if="isLoading" class="loading-container">
			<text>加载中...</text>
		</view>
		
		<view v-else class="form-container">
			<up-form
				:model="formData"
				ref="formRef"
			>
				<up-form-item prop="phoneNumber" :rules="[{ required: true, message: '请输入手机号码' }]">
					<up-input
						v-model="formData.phoneNumber"
						placeholder="请输入手机号码"
						maxlength="11"
						type="number"
						inputAlign="right"
					>
						<template #prefix>
							<view class="input-prefix">
								<text class="input-label">手机号码</text>
							</view>
						</template>
					</up-input>
				</up-form-item>
				
				<up-form-item prop="verifyCode" :rules="[{ required: true, message: '请输入验证码' }]">
					<up-input
						v-model="formData.verifyCode"
						placeholder="请输入验证码"
						maxlength="6"
						type="number"
						inputAlign="right"
					>
						<template #prefix>
							<view class="input-prefix">
								<text class="input-label">验证码</text>
							</view>
						</template>
						<template #suffix>
							<text @tap="getCode" class="verify-code-text">{{ tips }}</text>
						</template>
					</up-input>
				</up-form-item>
				
				<up-form-item prop="password" :rules="[
					{ required: true, message: '请输入密码' },
					{ 
						validator: (rule, value, callback) => {
							return validatePassword(value)
						},
						message: '密码必须包含数字和字母，且长度在6-20位之间'
					}
				]">
					<up-input
						v-model="formData.password"
						placeholder="请设置6-20位数字与字母组合密码"
						:type="passwordVisible ? 'text' : 'password'"
						inputAlign="right"
					>
						<template #prefix>
							<view class="input-prefix">
								<text class="input-label">设置密码</text>
							</view>
						</template>
						<template #suffix>
							<up-icon 
                                :name="passwordVisible ? 'eye-fill' : 'eye'" 
                                size="28" 
                                color="#999" 
                                @click="togglePasswordVisible"
                                class="password-toggle-icon"
                            ></up-icon>
						</template>
					</up-input>
				</up-form-item>
				
				<up-form-item prop="confirmPassword" :rules="[
					{ required: true, message: '请确认密码' },
					{ 
						validator: (rule, value, callback) => {
							return formData.password === value
						},
						message: '两次密码输入不一致'
					}
				]">
					<up-input
						v-model="formData.confirmPassword"
						placeholder="请再次输入密码"
						:type="confirmPasswordVisible ? 'text' : 'password'"
						inputAlign="right"
					>
						<template #prefix>
							<view class="input-prefix">
								<text class="input-label">确认密码</text>
							</view>
						</template>
						<template #suffix>
							<up-icon 
                                :name="confirmPasswordVisible ? 'eye-fill' : 'eye'" 
                                size="28" 
                                color="#999" 
                                @click="toggleConfirmPasswordVisible"
                                class="password-toggle-icon"
                            ></up-icon>
						</template>
					</up-input>
				</up-form-item>
			</up-form>
			
			<view class="agreement-box">
				<up-checkbox
					name="agree"
					usedAlone
					v-model:checked="aloneChecked"
				>
				</up-checkbox>	
				<view class="agreement-text">我已阅读并同意</view>
				<view class="agreement-text highlight" @tap="openAgreement('user')">《用户协议》</view>
				<view class="agreement-text">和</view>
				<view class="agreement-text highlight" @tap="openAgreement('privacy')">《隐私政策》</view>
			</view>
			
			<view class="submit-btn">
				<up-button type="primary" @tap="handleSubmit" :disabled="!aloneChecked">立即注册</up-button>
			</view>
			
			<view class="login-link" @tap="goToLogin">
				已有账号？立即登录
			</view>
		</view>
	</view>
</template>

<script setup>
	import { ref, onMounted } from "vue"
	import { validateMobile, validatePassword } from '@/utils/validate.uts'
	// import { sendRegisterCode, register } from '@/apis/user.uts'
	
	// 添加页面加载状态控制
	const isLoading = ref(true)
	const formRef = ref(null)
	const aloneChecked = ref(false)
	const formData = ref({
		phoneNumber: '',
		verifyCode: '',
		password: '',
		confirmPassword: ''
	})
	
	// 密码可见性控制
	const passwordVisible = ref(false)
	const confirmPasswordVisible = ref(false)
	
	// 切换密码可见性
	const togglePasswordVisible = () => {
		passwordVisible.value = !passwordVisible.value
	}
	
	// 切换确认密码可见性
	const toggleConfirmPasswordVisible = () => {
		confirmPasswordVisible.value = !confirmPasswordVisible.value
	}
	
	// 验证码相关
	const tips = ref('获取验证码');
	const uCodeRef = ref(null);
	const countdown = ref(0);
	
	const codeChange = (text) => {
		tips.value = text;
	};
	
	// 获取验证码
	const getCode = () => {
		// 如果倒计时还在进行中，不允许再次获取
		if (countdown.value > 0) {
			return;
		}

		// 手机号验证
		if (!validateMobile(formData.value.phoneNumber)) {
			uni.showToast({
				title: '请输入正确的手机号码',
				icon: 'none'
			})
			return
		}
		
		// 开始倒计时
		countdown.value = 60;
		tips.value = `${countdown.value}秒后重新获取`;
		
		const timer = setInterval(() => {
			countdown.value--;
			tips.value = `${countdown.value}秒后重新获取`;
			
			if (countdown.value <= 0) {
				clearInterval(timer);
				tips.value = '获取验证码';
			}
		}, 1000);
		
		// 模拟发送验证码成功
		uni.showToast({
			title: '验证码已发送',
			icon: 'success'
		});
		
		// 实际项目中使用下面的API调用
		/*
		sendRegisterCode(formData.value.phoneNumber)
			.then((res) => {
				// 验证码发送成功
				uni.showToast({
					title: '验证码已发送',
					icon: 'success'
				});
			})
			.catch((err) => {
				// 停止倒计时
				clearInterval(timer);
				countdown.value = 0;
				tips.value = '获取验证码';
				
				uni.showToast({
					title: err.message || '验证码发送失败',
					icon: 'none'
				});
			});
		*/
	};
	
	// 表单提交
	const handleSubmit = () => {
		// 简化验证，不依赖表单组件的validate方法
		// 验证手机号
		if (!validateMobile(formData.value.phoneNumber)) {
			uni.showToast({
				title: '请输入正确的手机号码',
				icon: 'none'
			})
			return
		}
		
		// 验证验证码
		if (!formData.value.verifyCode) {
			uni.showToast({
				title: '请输入验证码',
				icon: 'none'
			})
			return
		}
		
		// 验证密码
		if (!validatePassword(formData.value.password)) {
			uni.showToast({
				title: '密码必须包含数字和字母，且长度在6-20位之间',
				icon: 'none'
			})
			return
		}
		
		// 验证确认密码
		if (formData.value.password !== formData.value.confirmPassword) {
			uni.showToast({
				title: '两次密码输入不一致',
				icon: 'none'
			})
			return
		}
		
		// 验证是否同意协议
		if (!aloneChecked.value) {
			uni.showToast({
				title: '请阅读并同意用户协议和隐私政策',
				icon: 'none'
			})
			return
		}
		
		// 显示加载中
		uni.showLoading({
			title: '注册中...',
		});
		
		// 模拟注册成功
		setTimeout(() => {
			uni.hideLoading();
			uni.showToast({
				title: '注册成功',
				icon: 'success'
			});
			
			// 注册成功后跳转到登录页
			setTimeout(() => {
				uni.navigateTo({
					url: '/pages/login/index'
				})
			}, 1500);
		}, 1500);
		
		// 实际项目中使用下面的API调用
		/*
		// 提交注册信息
		const registerData = {
			phone: formData.value.phoneNumber,
			code: formData.value.verifyCode,
			password: formData.value.password
		};
		
		register(registerData)
			.then((res) => {
				uni.hideLoading();
				uni.showToast({
					title: '注册成功',
					icon: 'success'
				});
				
				// 注册成功后跳转到登录页
				setTimeout(() => {
					uni.navigateTo({
						url: '/pages/login/index'
					})
				}, 1500);
			})
			.catch((err) => {
				uni.hideLoading();
				uni.showToast({
					title: err.message || '注册失败',
					icon: 'none'
				});
			});
		*/
	}
	
	// 打开协议
	const openAgreement = (type) => {
		const title = type === 'user' ? '用户协议' : '隐私政策'
		// 这里可以打开对应的协议页面
		uni.showToast({
			title: `查看${title}`,
			icon: 'none'
		})
	}
	
	// 返回上一页
	const handleGoBack = () => {
		uni.navigateBack()
	}
	
	// 跳转到登录页
	const goToLogin = () => {
		uni.navigateTo({
			url: '/pages/login/index'
		})
	}
	
	// 页面加载完成后
	onMounted(() => {
		try {
			console.log('页面加载完成');
			// 模拟初始化完成
			setTimeout(() => {
				isLoading.value = false;
			}, 500);
		} catch (error) {
			console.error('页面加载错误:', error);
			isLoading.value = false;
		}
	})
</script>

<style lang="scss">
@import 'index.scss';

/* 图标样式 */
.iconfont {
	font-family: "iconfont";
	font-size: 40rpx;
}

.icon-back:before {
	content: "\e697";
}

/* 加载状态 */
.loading-container {
	display: flex;
	justify-content: center;
	align-items: center;
	height: 100vh;
}

/* 验证码文本样式 */
.verify-code-text {
	color: #1989fa;
	font-size: 28rpx;
}

/* 密码可见性切换图标 */
.password-toggle-icon {
	padding: 0 12rpx;
}

/* 输入框前缀容器样式 */
.input-prefix {
	display: flex;
	align-items: center;
	padding-right: 20rpx;
	border-right: 1px solid #EEEEEE;
}
</style>
